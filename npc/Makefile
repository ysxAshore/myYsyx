# Sanity check
ifeq ($(wildcard $(NPC_HOME)/csrc/npc_main.c),)
  $(error NEMU_HOME=$(NPC_HOME) is not a NPC repo)
endif

# Include variables and rules generated by menuconfig
-include $(NPC_HOME)/include/config/auto.conf
-include $(NPC_HOME)/include/config/auto.conf.cmd

# Extract variabls from menuconfig
GUEST_ISA ?= $(call remove_quote,$(CONFIG_ISA))
ENGINE ?= $(call remove_quote,$(CONFIG_ENGINE))
NAME    = $(GUEST_ISA)-nemu-$(ENGINE)

# Include all filelist.mk to merge file lists
FILELIST_MK = $(shell find -L csrc -name "filelist.mk")
include $(FILELIST_MK)

# 顶层模块名称
TOPNAME = ysyxSoCFull

# make输出目录
BUILD_DIR = ./build
# verilator编译得到的objdir
OBJ_DIR = $(BUILD_DIR)/obj_dir
BIN = $(BUILD_DIR)/$(TOPNAME)

# project source
# 自定义的约束文件路径
NXDC_FILES = constr/ysyxSoCFull.nxdc

# 构建auto_bind.cpp 用于通过函数自动绑定所有引脚
SRC_AUTO_BIND = $(abspath $(BUILD_DIR)/auto_bind.cpp)

$(SRC_AUTO_BIND): $(NXDC_FILES)
	python3 $(NVBOARD_HOME)/scripts/auto_pin_bind.py $^ $@

# 在vsrc目录下找到所有的.v文件
VSRCS = $(shell find $(abspath ./vsrc) -name "*.v") 
VSRCS += $(shell find /home/sxyang/Projects/ysyx/ysyxSoC/perip -name "*.v")
VSRCS += /home/sxyang/Projects/ysyx/ysyxSoC/build/ysyxSoCFull.v
# 根据filelist_mk找到所有的c文件
# Filter out directories and files in blacklist to obtain the final set of source files
DIRS-BLACKLIST-y += $(DIRS-BLACKLIST)
CSRCS-BLACKLIST-y += $(CSRCS-BLACKLIST) $(if $(DIRS-BLACKLIST-y), \
  						$(shell find -L $(DIRS-BLACKLIST-y) -name "*.c" | sed 's|^\./||'),)
CSRCS-y += $(shell find -L $(DIRS-y) -name "*.c" | sed 's|^\./||')
CSRCS = $(filter-out $(CSRCS-BLACKLIST-y),$(CSRCS-y))
CSRCS += $(SRC_AUTO_BIND)

# 编译参数
INC_PATH ?= 
VERILATOR_INC_PATH += /home/sxyang/Projects/ysyx/ysyxSoC/perip/uart16550/rtl /home/sxyang/Projects/ysyx/ysyxSoC/perip/spi/rtl
# verilator路径
VERILATOR = verilator
# verilator编译选项
#	-MMD: 创建.d依赖文件
#	-O3: 为verilator自身生成的代码启用慢速优化(与-CFLAGS -O3不同,后者影响 C 编译器的优化.-O3可能会以编译时间为代价提高仿真性能).目前这会设置--inline-mult -1
#	--x-assign: 赋值所有未初始化的X值 "–x-assign fast"会将所有X转换为最有利于性能的值
#	--x-initial: 初始化未以其他方式初始化的变量的X值 "–x-initial fast"会将所有X初始化为最有利于性能的值
#	--noassert: 关闭所有的assertions
ifeq ($(CONFIG_FTRACE),y)
VERILOG_DEFINES += -DFTRACE
endif
VERILATOR_CFLAGS += -MMD --build -cc --exe --trace\
				--x-assign fast --x-initial fast -O3 \
				--noassert --autoflush \
				--timescale "1ns/1ps" --no-timing \
				-DVL_TRACE_BUFFER_SIZE=8388608 \
		       	$(addprefix -I, $(VERILATOR_INC_PATH)) \
				$(VERILOG_DEFINES)

# 默认目标:使用verilator构建可执行文件
.DEFAULT_GOAL := $(BIN)

# mkdir ./build
$(shell mkdir -p $(BUILD_DIR)) 

# rules for NVBoard
include $(NVBOARD_HOME)/scripts/nvboard.mk

# rules for verilator
# INC_PATHS存储包含路径(include paths)的目录列表
# -DTOP_NAME 定义宏TOP_NAME 值为"V$(TOPNAME)"
INC_PATH += $(abspath ./include)
INCFLAGS = $(addprefix -I, $(INC_PATH))
CXXFLAGS += -g $(INCFLAGS) -DTOP_NAME="\"V$(TOPNAME)\""
LDFLAGS += $(LIBS)

include $(NPC_HOME)/scripts/config.mk

# 编译得到可执行文件
#     --top-module: 指定顶层输入模块名称 
#     -CFLAGS: 将指定的C编译器参数添加到生成的Makefile中,对于多个标志可以使用多个-CFLAGS选项.当在生成的Makefile上运行make时,这些参数会传递给C编译器
#     -LDFLAGS: 将指定的C链接器参数添加到生成的Makefile中,对于多个标志可以使用多个-LDFLAGS参数.当在生成的Makefile上运行make时，这些参数将在被链接的主文件之后传递给C链接器
#     -Mdir: 输出对象目录名称
#     -o: 最终的可执行文件名称
$(BIN): $(VSRCS) $(CSRCS) $(NVBOARD_ARCHIVE)
	$(VERILATOR) $(VERILATOR_CFLAGS) \
		--top-module $(TOPNAME) $^ \
		$(addprefix -CFLAGS , $(CXXFLAGS)) \
		$(addprefix -LDFLAGS , $(LDFLAGS)) \
		--Mdir $(OBJ_DIR) -o $(abspath $(BIN))

all: default

run: $(BIN)
ifdef CONFIG_DIFFTEST
	@$^ $(ARGS) -d $(CONFIG_DIFFTEST_REF_PATH) $(IMG)	
else
	@$^ $(ARGS) $(IMG)
endif

gdb: $(BIN)
ifdef CONFIG_DIFFTEST
	@gdb --args $^ $(ARGS) -d $(CONFIG_DIFFTEST_REF_PATH) $(IMG)	
else
	@gdb --args $^ $(ARGS) $(IMG)
endif

vcd:
	gtkwave $(BUILD_DIR)/../wave.vcd

clean:
	rm -rf $(BUILD_DIR) $(NPC_HOME)/wave.vcd

.PHONY: default all clean run vcd
